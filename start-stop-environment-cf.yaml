AWSTemplateFormatVersion: 2010-09-09
Metadata:
  'AWS::CloudFormation::Designer':
    42b391b8-8760-4e05-86e6-b2603aa9e203:
      size:
        width: 60
        height: 60
      position:
        x: 60
        'y': 80
      z: 0
      embeds: []
      isassociatedwith:
        - 2d605179-bffb-473b-a272-092cc16c474c
    2d605179-bffb-473b-a272-092cc16c474c:
      size:
        width: 60
        height: 60
      position:
        x: -72.5
        'y': 77.5
      z: 0
      embeds: []
    86669b58-9605-4dcf-9e41-4b8f2293aedf:
      size:
        width: 60
        height: 60
      position:
        x: -120
        'y': 170
      z: 0
      embeds: []
    3260e887-1314-461c-951b-758fcc6b42dd:
      size:
        width: 60
        height: 60
      position:
        x: 90
        'y': 170
      z: 0
      embeds: []
    0d95330d-54f4-4e82-8dbd-c876a633acc8:
      size:
        width: 60
        height: 60
      position:
        x: -40
        'y': 170
      z: 0
      embeds: []
      isassociatedwith:
        - 86669b58-9605-4dcf-9e41-4b8f2293aedf
    8650c417-22c8-48a9-a520-1ba12e31f41f:
      size:
        width: 60
        height: 60
      position:
        x: -120
        'y': 280
      z: 0
      embeds: []
    7fcdae94-571e-4802-a9f8-197eca66b085:
      size:
        width: 60
        height: 60
      position:
        x: 90
        'y': 280
      z: 0
      embeds: []
    1660e06c-bfa8-4a8f-b7cf-70ab5df022fc:
      size:
        width: 60
        height: 60
      position:
        x: 180
        'y': 170
      z: 0
      embeds: []
      isassociatedwith:
        - 86669b58-9605-4dcf-9e41-4b8f2293aedf
        - 3260e887-1314-461c-951b-758fcc6b42dd
    7212818f-6050-4dfc-a383-460e5e65949d:
      size:
        width: 60
        height: 60
      position:
        x: 430
        'y': 160
      z: 0
      embeds: []
    e5abcef9-b31c-4c1a-998a-feb6567cf517:
      size:
        width: 60
        height: 60
      position:
        x: 310
        'y': 160
      z: 0
      embeds: []
    66599f7f-2292-4d95-8e77-438db37d98cb:
      size:
        width: 60
        height: 60
      position:
        x: 530
        'y': 80
      z: 0
      embeds: []
      isassociatedwith:
        - 2d605179-bffb-473b-a272-092cc16c474c
    c978cfd2-e8af-4555-b72a-f9983674cd11:
      size:
        width: 60
        height: 60
      position:
        x: 430
        'y': 80
      z: 0
      embeds: []
      isassociatedwith:
        - 2d605179-bffb-473b-a272-092cc16c474c
        - 3a5300e6-13bd-4858-a6c1-45500f93df81
    3a5300e6-13bd-4858-a6c1-45500f93df81:
      size:
        width: 60
        height: 60
      position:
        x: 310
        'y': 80
      z: 0
      embeds: []
    aabb7af2-bb12-4d6c-a080-0be3cff42447:
      size:
        width: 60
        height: 60
      position:
        x: 640
        'y': 190
      z: 0
      embeds: []
      isassociatedwith:
        - 391ff8e1-de39-4c3e-9fd2-708b74efb235
    391ff8e1-de39-4c3e-9fd2-708b74efb235:
      size:
        width: 60
        height: 60
      position:
        x: 540
        'y': 190
      z: 0
      embeds: []
    37a751e3-baf3-479d-b157-96a392b92f49:
      size:
        width: 60
        height: 60
      position:
        x: 310
        'y': 260
      z: 0
      embeds: []
    915ea2ae-114e-4977-b91c-60ae49753450:
      size:
        width: 60
        height: 60
      position:
        x: 430
        'y': 260
      z: 0
      embeds: []
      isassociatedwith:
        - 37a751e3-baf3-479d-b157-96a392b92f49
Parameters:
  SshKeyNameParameter:
    Type: String
    Default: Your-SSH-Key-Name
    Description: The EC2 keypair name for instance SSH access.
  SmsPhoneNumberParameter:
    Type: String
    Default: Your-SMS-Phone-Number
    Description: The phone number to message when errors occur.
Resources:
  ManageEnvironmentIamPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: ManageEnvPolicy
      Roles:
        - Ref: ManageEnvRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'logs:CreateLogGroup'
              - 'logs:CreateLogStream'
              - 'logs:DeleteLogGroup'
              - 'logs:DeleteLogStream'
              - 'logs:DescribeLogGroups'
              - 'logs:GetLogEvents'
              - 'logs:PutLogEvents'
              - 'logs:PutRetentionPolicy'
            Resource: 'arn:aws:logs:*:*:*'
          - Effect: Allow
            Action:
              - 'iam:AddRoleToInstanceProfile'
              - 'iam:CreateInstanceProfile'
              - 'iam:CreateRole'
              - 'iam:DeleteInstanceProfile'
              - 'iam:DeleteRole'
              - 'iam:DeleteRolePolicy'
              - 'iam:GetRole'
              - 'iam:PassRole'
              - 'iam:PutRolePolicy'
              - 'iam:RemoveRoleFromInstanceProfile'
            Resource: '*'
          - Effect: Allow
            Action:
              - 'cloudformation:*'
              - 'ec2:*'
              - 'rds:*'
              - 'autoscaling:*'
              - 'elasticloadbalancing:*'
              - 'elasticfilesystem:*'
              - 'elasticloadbalancing:*'
              - 'lambda:*'
              - 'dynamodb:*'
              - 'sqs:*'
              - 'sns:*'
            Resource: '*'
          - Effect: Deny
            Action: 'aws-portal:*Billing'
            Resource: '*'
          - Effect: Deny
            Action:
              - 'cloudtrail:DeleteTrail'
              - 'cloudtrail:StopLogging'
              - 'cloudtrail:UpdateTrail'
            Resource: '*'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 42b391b8-8760-4e05-86e6-b2603aa9e203
  ManageEnvRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: ManageEnvRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: 'sts:AssumeRole'
            Principal:
              Service:
                - lambda.amazonaws.com
            Effect: Allow
            Sid: ''
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 2d605179-bffb-473b-a272-092cc16c474c
  StartEnvironment:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.handler
      MemorySize: 128
      Timeout: 15
      Role: !GetAtt
        - ManageEnvRole
        - Arn
      Runtime: nodejs6.10
      Code:
        ZipFile: |
          exports.handler = function(event, context, callback) {

             var AWS = require('aws-sdk');
             var cloudformation = new AWS.CloudFormation();
             
             var account_id = context.invokedFunctionArn.split(":")[4]
             var region = process.env.AWS_DEFAULT_REGION

             var params = {
               StackName: event.stackName, /* required */
               Capabilities: [
                 'CAPABILITY_IAM'
               ],
               EnableTerminationProtection: false,
               OnFailure: 'ROLLBACK', // DO_NOTHING | ROLLBACK | DELETE,
               Parameters: [
                 {
                   ParameterKey: 'KeyName',
                   ParameterValue: event.keyPairName
                 },
                 {
                     ParameterKey: 'ManagerSize',
                     ParameterValue: event.managerSize || '1'
                 },
                 {
                     ParameterKey: 'ClusterSize',
                     ParameterValue: event.clusterSize || '1'
                 }
               ],
               Tags: [
                 {
                   Key: 'CloudFormationStack',
                   Value: event.stackName
                 }
               ],
               TemplateURL: 'https://editions-us-east-1.s3.amazonaws.com/aws/stable/Docker.tmpl',
               TimeoutInMinutes: 20,
               NotificationARNs: [ 'arn:aws:sns:' + region + ':' + account_id + ':cloudformation-events' ]
             };
             cloudformation.createStack(params, function(err, data) {
               if (err) {
                 var sns = new AWS.SNS();
                 var topic_arn = "arn:aws:sns:" + region + ":" + account_id + ":error-notification";
                 console.log("using topic_arn: "+topic_arn);
                 sns.publish({
                   Subject: 'Error during createStack',
                   Message: 'Error during createStack: ' + err,
                   TopicArn: topic_arn
                 }, function(err, data) {
                   if (err) {
                     console.log(err.stack);
                   }
                 });
                 callback("Error creating the Stack: "+err); 
               }
               else {
                 callback(null, "Success creating the Stack.");
               }
             });
          }
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 86669b58-9605-4dcf-9e41-4b8f2293aedf
  StopEnvironment:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.handler
      MemorySize: 128
      Timeout: 15
      Role: !GetAtt
        - ManageEnvRole
        - Arn
      Runtime: nodejs6.10
      Code:
        ZipFile: |
          exports.handler = function(event, context, callback) {

             var AWS = require('aws-sdk');
             var cloudformation = new AWS.CloudFormation();

              var params = {
                StackName: event.stackName /* required */
              };
             cloudformation.deleteStack(params, function(err, data) {
               if (err) {
                  callback("Error deleting the Stack: "+err); 
               }
               else {
                  callback(null, "Success deleting the Stack.");
               }
             });
          }
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 3260e887-1314-461c-951b-758fcc6b42dd
  AllowCloudwatchStartEnv:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt 
        - StartEnvironment
        - Arn
      Principal: events.amazonaws.com
      SourceArn: !GetAtt 
        - StartRule
        - Arn
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 0d95330d-54f4-4e82-8dbd-c876a633acc8
  StartRule:
    Type: 'AWS::Events::Rule'
    Properties:
      Name: StartEnvironmentRule
      ScheduleExpression: cron(30 14 ? * 2-6 *)
      Targets:
        - Arn: !GetAtt 
            - StartEnvironment
            - Arn
          Id: start_environment_rule_target
          Input: !Join 
            - ''
            - - '{ "stackName": "MyStack", "keyPairName": "'
              - Ref: SshKeyNameParameter
              - '" }'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 8650c417-22c8-48a9-a520-1ba12e31f41f
  StopRule:
    Type: 'AWS::Events::Rule'
    Properties:
      Name: StopEnvironmentRule
      ScheduleExpression: cron(0 15 ? * 2-6 *)
      Targets:
        - Arn: !GetAtt 
            - StopEnvironment
            - Arn
          Id: stop_environment_rule_target
          Input: '{ "stackName": "MyStack" }'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 7fcdae94-571e-4802-a9f8-197eca66b085
  AllowCloudwatchStopEnv:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt 
        - StopEnvironment
        - Arn
      Principal: events.amazonaws.com
      SourceArn: !GetAtt 
        - StopRule
        - Arn
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 1660e06c-bfa8-4a8f-b7cf-70ab5df022fc
  CloudFormationEventsTopic:
    Type: 'AWS::SNS::Topic'
    Properties:
      TopicName: cloudformation-events
      Subscription:
        - Protocol: lambda
          Endpoint: !GetAtt 
            - ErrorNotifyLambda
            - Arn
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 7212818f-6050-4dfc-a383-460e5e65949d
  ErrorNotificationTopic:
    Type: 'AWS::SNS::Topic'
    Properties:
      TopicName: error-notification
      Subscription:
        - Protocol: sms
          Endpoint:
            Ref: SmsPhoneNumberParameter
    Metadata:
      'AWS::CloudFormation::Designer':
        id: e5abcef9-b31c-4c1a-998a-feb6567cf517
  AllowLambdaPublishToSnsCloudformationEvents:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: AllowLambdaPublishToSnsCloudformationEvents
      Roles:
        - Ref: ManageEnvRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'sns:Publish'
              - 'lambda:InvokeFunction'
            Resource: !Ref CloudFormationEventsTopic
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 66599f7f-2292-4d95-8e77-438db37d98cb
  AllowLambdaPublishToSns:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: AllowLambdaPublishToSns
      Roles:
        - Ref: ErrorNotificationRole
        - Ref: ManageEnvRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'sns:Publish'
            Resource: !Ref ErrorNotificationTopic
          - Effect: Allow
            Action:
              - 'logs:CreateLogGroup'
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
            Resource: 'arn:aws:logs:*:*:*'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: c978cfd2-e8af-4555-b72a-f9983674cd11
  ErrorNotificationRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: 'sts:AssumeRole'
            Principal:
              Service: lambda.amazonaws.com
            Effect: Allow
            Sid: ''
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 3a5300e6-13bd-4858-a6c1-45500f93df81
  AllowCloudwatchWrite:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: AllowCloudwatchWrite
      Roles:
        - Ref: SnsCloudwatchFeedbackRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'logs:CreateLogGroup'
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
            Resource: 'arn:aws:logs:*:*:*'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: aabb7af2-bb12-4d6c-a080-0be3cff42447
  SnsCloudwatchFeedbackRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: 'sts:AssumeRole'
            Principal:
              Service: sns.amazonaws.com
            Effect: Allow
            Sid: ''
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 391ff8e1-de39-4c3e-9fd2-708b74efb235
  ErrorNotifyLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.handler
      MemorySize: 128
      Timeout: 15
      Role:
        'Fn::GetAtt':
          - ErrorNotificationRole
          - Arn
      Runtime: nodejs6.10
      Code:
        ZipFile: |
          AWS = require('aws-sdk');

          exports.handler = function(event, context) {
              const message = event.Records[0].Sns.Message;
              if (message.indexOf("ROLLBACK_IN_PROGRESS") > -1) {
                  var fields = message.split("\n");
                  var subject = fields[11].replace(/['']+/g, '');
                  var account_id = context.invokedFunctionArn.split(":")[4]
                  var region = process.env.AWS_DEFAULT_REGION
                  var topic_arn = "arn:aws:sns:" + region + ":" + account_id + ":error-notification"
                  send_SNS_notification(subject, message, topic_arn);
              }
          };

          function send_SNS_notification(subject, message, topic_arn) {
              var sns = new AWS.SNS();
              subject = subject + " is in ROLLBACK_IN_PROGRESS";
              sns.publish({
                  Subject: subject,
                  Message: message,
                  TopicArn: topic_arn
              }, function(err, data) {
                  if (err) {
                      console.log(err.stack);
                      return;
                  }
                  console.log('push sent');
                  console.log(data);
              });
          }
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 37a751e3-baf3-479d-b157-96a392b92f49
  AllowSnsErrorNotify:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt 
        - ErrorNotifyLambda
        - Arn
      Principal: sns.amazonaws.com
      SourceArn: !Ref CloudFormationEventsTopic
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 915ea2ae-114e-4977-b91c-60ae49753450

